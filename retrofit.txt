/////////////////////////////Retrofit//////////////////////////////////////////
Annotates interface methods
When call happens in Java to a methods annotated with retrofit, retrofit comes in play to perform actions @.
eg @GET ("/video") -
when user calls gt method for path video retrofit converts method below it to a JSON

@FormUrlEncoded
@POST ("/video")
public 
@Field("name") String name;
@Field("url") String url;

Then for the Reftrofit Adapter we must create REST adapter
RestAdapter adapt=new RestAdapter.Builder()
here we tell it where server is .setEndPoint ("http://localhost)
				.build();

After we creating object (java class) that implements R@ interface
Video svc=adapt.create(VideoSvc.class);
then to get a list of videos(actually converting String vidoes into Http request that must be recognized on the "other end" and returned acc. to impl.
String videos=svc.getVideos();


RETROFIT operates on the client side::SPRING Framewrk - on the server side

@AutoWired - SPRING @ that tells Spring to look in configuration? dependancy injections (bean of specific type for var, obj) and instatiate it to object annotated with @AutoWired
E.G. @AutoWired
	private UserManager users;

In Spring configuration? is manually written class that maps specific object to Autowired - i.e. APPLICATION (launcher)

@Configuration

@Bean				// SPring gonna call all methods annotated with @Bean to get dependant objects to a controller @AutoWired ones.
public class UserConf {
public UserManager usermanager{
return new user}

So configuration is being written for particular application
By default Spring calls config only once so all other same objects in controller is they are receives same spec.instance from config.

///searching for iplemntation of controller interfaces in configuration//
@ComponentScan({/*define package names or prefixes like*/"com.mobile"}
SPRING looks for code annotated with @Controller or @Service - the latter should be added to your class if it has implementation for interface

Together with @ComponentScan goes @EnableAutoConfiguration

So @Bean ties @Autowired Interface to specific class that implements this interface in Application (Configuration) java class