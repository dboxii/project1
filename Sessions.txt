Multiple mobile clients talk to servlet

Session - ongoing dialog of servlet and mobdev - maintaining it.

Described by: duration, type of maintaining infromation.
////Implementation is standart and should be so.//

Session library : 
--send back to Mobdev cookie info (id  - cryptographic token)
-all info is storing on the server side (or just sensitive one)

Http  is a plain text "talk"
Https - encrypted via public key and private key lock-unlock or vv

Certificated Authority has a private key that is trusted
Client and Server has a public keys for CA 
CA is "signing"(crypting) these public keys issuing Certificates.
Exchange of keys happens only at the begining of "talk"



2 categories data : for Everyone(Put, post, delete:http), Restricted (https:admin access, or user email)

Client 1st request : https /login with user, password
Server (OK case): response with cookie_1(so cookie_1 assosiated with this client)

Client 2nd request: goes with cookie_1

///SPRING security///
	https	|Springsecurity filter (object)|
Client---------	------------------------------->Dispather servlet------->Controller
		|
Handle  Login session and cookie checking
We just need to tell spring that a controller is sensitive
Spring can assosiates users with roles

--------------------------Annotation---------------
@Controller
public class VideoSvc{


//sensitive method
@PreAuthorize("hasRole(admin)")
public void upload {}

}


--------establishing a client and his role---
/ user details service Inteface / where spring lookup user by name (after login form page or (in https) ?basic authentification mechanism)

?hash value of the password


-------Access to user details (name)----------
Pricipal - current user account

@Controller
public class VideoSvc{


//sensitive method
@PreAuthorize("hasRole(user)")
public boolean upload (...., Principal p, ...){

String user=p.getName();

Video.setUser(user);
}


OR it could be achived via Configuration where method should be marked as Required full authentification
}
//////via  built in information in an object//

@PreAuthorize("#v.owner=principal.name)
public boolean upload (...., ){}

public class Video {
private String owner;
public String getOwner(){};

}

}
//////
Let server decide what app should and shouln;t have access

//////OAuth 2.0///

*Finer control over resourses and user' accounts
*revoke access to individual apps
*Chnaging a password w/o revoking access to all apps ( or vv)
*doesn't require user name and pass for app


Based on providing "valet key " to an app